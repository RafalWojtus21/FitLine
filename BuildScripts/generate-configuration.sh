#!/bin/sh

#  generate-configuration.sh
#  AcademyMVI
#
#  Created by Bart on 15/11/2021.
#  
# Credits to Leszek Kaczor @ Untitled Kingdom

CONFIG_DEFAULT_PATH="${SRCROOT}/Fitmania/Configurations/Configuration-Default.plist"
CONFIG_INPUT_PATH="${SRCROOT}/Fitmania/Configurations/Configuration-${APP_CONFIGURATION}.plist"
CONFIG_EXTENSION_OUTPUT_PATH="${SRCROOT}/Fitmania/Configurations/Configuration.swift"

set -e

if [ -z "${APP_CONFIGURATION}" ]
then
echo "APP_CONFIGURATION environment variable is unset"
exit 1 # Never happens
fi

if [ ! -f "${CONFIG_DEFAULT_PATH}" ]
then
# Safety - otherwise a build may be made with the wrong config file
echo "Missing default config file Config-Default"
exit 2
fi

if [ ! -f "${CONFIG_INPUT_PATH}" ]
then
# Safety - otherwise a build may be made with the wrong config file
echo "Missing config file Config-${APP_CONFIGURATION}"
exit 2
fi


swift_code() {

cat <<EOF
import Foundation

let defaultParameters = NSDictionary(contentsOfFile: "$CONFIG_DEFAULT_PATH") as! [String : Any]
// Get the contents of Config-(SCHEME).plist
let configParameters = NSDictionary(contentsOfFile: "$CONFIG_INPUT_PATH") as! [String : Any]

func paramValue(_ param: Any) -> String {
switch param {
case let value as Bool: return value ? "true" : "false"
case let value as String: return "\"\(value)\""
case let value as Date: return "Date(timeIntervalSince1970: \(value.timeIntervalSince1970))"
default: return "\(param)"
}
}

let params = defaultParameters.merging(configParameters, uniquingKeysWith: { \$1 }).mapValues { paramValue(\$0) }

let configExtension = """
// ! This file was generated by a RunScript Build Phase
// ! ⚠️ Do not modify or commit ⚠️
// swiftlint:disable convenience_type
import Foundation

struct Config {
\(params.map { "\\\tstatic var \(\$0) = \(\$1)" }.joined(separator: "\\\n"))
}
// swiftlint:enable convenience_type

"""
try! configExtension.write(toFile: "$CONFIG_EXTENSION_OUTPUT_PATH", atomically: true, encoding: .utf8)
EOF
}

# Run the Swift code in swift_code()
echo "$(swift_code)" \
| DEVELOPER_DIR="$DEVELOPER_DIR" \
xcrun --sdk macosx \
"$TOOLCHAIN_DIR/usr/bin/"swift -
